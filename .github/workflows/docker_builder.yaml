name: Build and publish docker image for each commit in the officiala nanocurrency/nano-node repo
# on: [push, pull_request]
on:
  schedule:
    - cron: "0/5 * * * *" # "every 30 minutes
  workflow_dispatch:

jobs:
  publish_docker_image_on_new_commit:
    runs-on: ubuntu-latest
    steps:
      - name: checkout gr0vity-dev/nano-node-builder
        uses: actions/checkout@v3
        with:
          path: nano-node-builder
      - name: Compare commit hash between source and mirror
        id: compare_hash
        working-directory: ./nano-node-builder
        run: |
          # Get the current date in the desired format
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Define repository specifics
          BASE_URL="https://api.github.com/repos/nanocurrency/nano-node"
          GH_API_HEADER="Accept: application/vnd.github+json"
          
          # Get the latest commits and write to disk in JSON format. Try to extract pr number form commit message (#DDDD)
          curl -s -H "${GH_API_HEADER}" "${BASE_URL}/commits?sha=develop&per_page=25" | \
          jq --arg NOW "$NOW" '
            map({
              hash: .sha,
              type: "commit",
              title: .commit.message,
              pull_request: (try .commit.message | match("\\(#(\\d{4,})\\)").captures[0].string // "N/A"),
              created_at: .commit.author.date,
              built_at: null,
              build_status: null,
              docker_tag: null,
              build_started_at: $NOW,
              run_id: null
            })' > $HOME/latest_commits.json
          
          # Helper to fetch pull request number by commit SHA via github api
          fetch_pr_number() {
            local COMMIT_SHA=$1
            curl -s -H "${GH_API_HEADER}" "https://api.github.com/search/issues?q=${COMMIT_SHA}+type:pr+repo:${REPO}" | \
            jq -r '.items[0].number // "N/A"'
          }
          
          # Find all commits without a PR number in their title
          jq '[.[] | select(.pull_request == "N/A") | {hash: .hash, pull_request: .pull_request}]' $HOME/latest_commits.json > $HOME/shas_to_update.json          
          # Read hashes from the JSON file and create a mapping
          jq -c '.[]' $HOME/shas_to_update.json | while IFS= read -r entry; do
            hash=$(echo "$entry" | jq -r '.hash')
            pr_number=$(fetch_pr_number "$hash")
            # Create a JSON object for each mapping
            echo "{\"hash\":\"$hash\", \"pr_number\":\"$pr_number\"}"
          done | jq -s '.' > $HOME/sha_pr_mapping.json
          
          # Update original json with pr numbers from github api
          jq --slurpfile updates "$HOME/sha_pr_mapping.json" ' 
            ($updates[0] | map({key: .hash, value: .pr_number}) | from_entries) as $map |  
            map(
              if $map[.hash] then
                .pull_request = if .pull_request == "N/A" then $map[.hash] else .pull_request end
              else
                .
              end
            )' "$HOME/latest_commits.json" > "$HOME/updated_commits.json"          
          mv $HOME/updated_commits.json $HOME/latest_commits.json

          # Append new commits to existing builds_file and remove duplicates
          jq -s '.[0] as $a | .[1] as $b | ($a + $b | group_by(.hash) | map(.[0]))' \
          docker_builder/builds.json $HOME/latest_commits.json > temp.out && mv temp.out docker_builder/builds.json

          # Get all open pull requests and write to disk in JSON format
          curl -s -H "${GH_API_HEADER}" "${BASE_URL}/pulls?state=open&per_page=100&page=1" | \
          jq --arg NOW "$NOW" '
            map(
              {
                hash: .head.sha,
                type: "pull_request",
                title: .title,
                author: .user.login,
                body: .body,
                draft: .draft,
                pull_request: .number,
                label: .head.label,
                created_at: .created_at,
                built_at: null,
                build_status: null,
                docker_tag: null, 
                build_started_at: $NOW,
                run_id: null
              }
            )' > $HOME/all_prs.json

          # Append new PRs to existing builds_file and remove duplicates
          jq -s '.[0] as $a | .[1] as $b | ($a + $b | group_by(.hash) | map(.[0]))' \
          docker_builder/builds.json $HOME/all_prs.json > temp.out && mv temp.out docker_builder/builds.json

          # Get first hash that is not yet built
          COMMIT_TO_TEST=$(jq -r '.[] | select(.build_status == null) | .hash' docker_builder/builds.json | head -n 1)

          if [ -z "$COMMIT_TO_TEST" ]; then
              echo "The COMMIT_TO_TEST variable is empty. Exiting..."
              exit 0
          else
              # Update the build_status to "building" for the specified commit
              jq --arg COMMIT_TO_TEST "$COMMIT_TO_TEST" '
                map(if .hash == $COMMIT_TO_TEST then .build_status = "building" else . end)' \
                docker_builder/builds.json > $HOME/temp.json && mv $HOME/temp.json docker_builder/builds.json

              # Extract the JSON item where hash matches COMMIT_TO_TEST
              current_json_item=$(jq --arg COMMIT_TO_TEST "$COMMIT_TO_TEST" '
                map(select(.hash == $COMMIT_TO_TEST)) | .[0]' docker_builder/builds.json)

              # Determine if the current item is a pull request or a commit
              result=$(echo "$current_json_item" | jq '
                if .type == "pull_request" then
                  .label | split(":") | {owner: .[0], branch: .[1]}
                else
                  empty
                end')

              if [ -z "$result" ]; then
                  # Default repo for commits
                  echo "owner=nanocurrency" >> $GITHUB_OUTPUT
                  echo "branch=$COMMIT_TO_TEST" >> $GITHUB_OUTPUT
                  echo "add_latest=1" >> $GITHUB_OUTPUT
              else
                  # User repo for pull requests
                  owner=$(echo "$result" | jq -r '.owner')
                  branch=$(echo "$result" | jq -r '.branch')
                  echo "owner=$owner" >> $GITHUB_OUTPUT
                  echo "branch=$branch" >> $GITHUB_OUTPUT
              fi

              echo "continue=1" >> $GITHUB_OUTPUT
              echo "COMMIT_TO_TEST=$COMMIT_TO_TEST" >> $GITHUB_OUTPUT

              # Only commit if there is a change (else git returns -1 and the workflow fails)
              if [ -n "$(git status --porcelain)" ]; then
                  git config user.name "GitHub Actions Bot"
                  git config user.email "actions@github.com"
                  git pull
                  git add .
                  git commit -m "Update docker build status to building for $COMMIT_TO_TEST"
                  git push origin main
              else
                  echo "No changes detected. Skipping git commit."
              fi
          fi

      - name: checkout nanocurrency/nano-node
        if: ${{ steps.compare_hash.outputs.continue > 0 }}
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          repository: ${{ steps.compare_hash.outputs.owner }}/nano-node
          submodules: "recursive"
          ref: ${{ steps.compare_hash.outputs.branch }}
          path: nano-node
      - name: build docker image
        continue-on-error: true
        if: ${{ steps.compare_hash.outputs.continue > 0 }}
        working-directory: ./nano-node
        id: docker_build
        run: |
          DOCKER_TAG=${{ steps.compare_hash.outputs.COMMIT_TO_TEST }}
          ADD_LATEST=${{ steps.compare_hash.outputs.add_latest}}
          echo "BUILD_STATUS=fail" >> $GITHUB_OUTPUT

          docker build -f docker/node/Dockerfile -t gr0v1ty/nano-node .
          # If build fails, the following part is not executed but the next steps are executed!

          echo "BUILD_STATUS=pass" >> $GITHUB_OUTPUT
          echo "DOCKER_TAG=gr0v1ty/nano-node:${DOCKER_TAG}" >> $GITHUB_OUTPUT
          # LOGIN to dockerhub
          echo ${{ secrets.DH_PWD }} | docker login -u gr0v1ty --password-stdin
          docker tag gr0v1ty/nano-node gr0v1ty/nano-node:$DOCKER_TAG
          # Push with commit hash as version
          docker push gr0v1ty/nano-node:$DOCKER_TAG

          if [ "$ADD_LATEST" -eq 1 ]; then
            # Push as latest
            docker push gr0v1ty/nano-node
            docker push gr0v1ty/nano-node:latest
          fi

      - name: checkout gr0vity-dev/nano-node-builder
        if: ${{ steps.compare_hash.outputs.continue > 0 }}
        uses: actions/checkout@v3
        with:
          path: nano-node-builder
      - name: Compare commit hash between source and mirror
        if: ${{ steps.compare_hash.outputs.continue > 0 }}
        working-directory: ./nano-node-builder
        run: |
          git pull origin main
          BUILD_STATUS="${{ steps.docker_build.outputs.BUILD_STATUS }}"
          BUILD_AT=$(date -u +%FT%TZ)
          DOCKER_TAG="${{ steps.docker_build.outputs.DOCKER_TAG }}"
          hash_value="${{ steps.compare_hash.outputs.COMMIT_TO_TEST }}"
          GITHUB_RUN_ID="${{ github.run_id }}"

          # Update the builds.json with the new build information
          jq --arg build_status "$BUILD_STATUS" \
            --arg DOCKER_TAG "$DOCKER_TAG" \
            --arg build_at "$BUILD_AT" \
            --arg hash_value "$hash_value" \
            --arg run_id "$GITHUB_RUN_ID" \
            '
            map(
              if .hash == $hash_value then 
                .build_status = $build_status | 
                .built_at = $build_at | 
                .docker_tag = ($DOCKER_TAG | gsub("{hash}"; .hash)) | 
                .run_id = $run_id
              else . end
            )' docker_builder/builds.json > $HOME/temp.json && mv $HOME/temp.json docker_builder/builds.json

          git add .
          git commit -m "Update build status to $BUILD_STATUS for $DOCKER_TAG"
          git push origin main
